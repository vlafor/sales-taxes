<?php

require_once '../classes/Basket.class.php';
require_once '../classes/Item.class.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-10 at 14:38:41.
 */
class BasketTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Basket
     */
    protected $basket;
    
    protected $items;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        
        $basicTaxRate = 0.1;
        $importDutyRate = 0.05;
        $noTaxRate = 0.0;
        
        $this->basket = new Basket();
        
        $this->items = [
            new Item('imported bottle of perfume', 27.99, $basicTaxRate, $importDutyRate),
            new Item('bottle of perfume', 18.99, $basicTaxRate, $noTaxRate),
            new Item('packet of paracetamol', 9.75, $noTaxRate, $noTaxRate),
            new Item('imported box of chocolates', 11.25, $noTaxRate, $importDutyRate),
        ];

        foreach ($this->items as $item) {
            $this->basket->addItem($item);
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testCalculatesTotalSumExcludingTaxes() {
        $expectedTotal = 67.98;
        
        $actualTotal = $this->basket->getTotalPriceWithoutTax();
        $this->assertEquals($expectedTotal, $actualTotal);
    }
    
    public function testCalculatesTotalSumIncludingTaxes() {
        $expectedTotal = 74.68;
        
        $actualTotal = $this->basket->getTotalPriceInclTax();
        $this->assertEquals($expectedTotal, $actualTotal);
    }
    
    public function testReturnsAllItems() {
        $returnedItems = $this->basket->getAllItems();
        
        $this->assertTrue($returnedItems === $this->items);
        
        
    }
    
    
    


}
